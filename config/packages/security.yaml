security:
    encoders:
        App\Entity\Duck:
            algorithm: auto

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_USER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_USER]
        ROLE_USER: ROLE_USER

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Duck
                property: duckname
#        in_memory:
#            memory:
#                users:
#                    user: {password: userpass, roles: ['ROLE_USER']}
#                    admin: {password: adminpass, roles: ['ROLE_ADMIN']}
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: ~
            guard:
                authenticators:
                    - App\Security\DuckAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: quack_index

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/admin/users, roles: ROLE_SUPER_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
